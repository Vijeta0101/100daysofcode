#include <iostream>
#include <vector>

using namespace std;

int maxSubmatrixSum(vector<vector<int>>& matrix) {
  int n = matrix.size();
  int m = matrix[0].size();

  // dp[i][j] stores the maximum sum of a submatrix ending at (i, j)
  vector<vector<int>> dp(n, vector<int>(m, 0));

  // Initialize the first row and first column of dp
  for (int i = 0; i < n; i++) {
    dp[i][0] = matrix[i][0];
  }
  for (int j = 0; j < m; j++) {
    dp[0][j] = matrix[0][j];
  }

  // Calculate the maximum sum of a submatrix ending at (i, j)
  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j];
    }
  }

  // Find the maximum sum of a submatrix
  int maxSum = INT_MIN;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      maxSum = max(maxSum, dp[i][j]);
    }
  }

  return maxSum;
}

int main() {
  // Create a 2D array
  vector<vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};

  // Find the
